"""
    Aifs api

    aifs api  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from aifs_client.api_client import ApiClient, Endpoint as _Endpoint
from aifs_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)


class DataViewUploadApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.upload_annotation_to_data_view_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/annotations',
                'operation_id': 'upload_annotation_to_data_view',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                    'file_meta',
                    'files',
                ],
                'required': [
                    'data_view_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                    'file_meta':
                        (file_type,),
                    'files':
                        ([file_type],),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                    'file_meta': 'fileMeta',
                    'files': 'files',
                },
                'location_map': {
                    'data_view_id': 'path',
                    'file_meta': 'form',
                    'files': 'form',
                },
                'collection_format_map': {
                    'files': 'csv',
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'multipart/form-data',
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.upload_dataset_zip_to_data_view_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/dataset-zip',
                'operation_id': 'upload_dataset_zip_to_data_view',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                    'x_file_name',
                    'body',
                ],
                'required': [
                    'data_view_id',
                    'x_file_name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                    'x_file_name':
                        (str,),
                    'body':
                        (file_type,),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                    'x_file_name': 'X-File-Name',
                },
                'location_map': {
                    'data_view_id': 'path',
                    'x_file_name': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/octet-stream'
                ]
            },
            api_client=api_client
        )
        self.upload_file_to_data_view_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/artifact',
                'operation_id': 'upload_file_to_data_view',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                    'x_file_name',
                    'body',
                ],
                'required': [
                    'data_view_id',
                    'x_file_name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                    'x_file_name':
                        (str,),
                    'body':
                        (file_type,),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                    'x_file_name': 'X-File-Name',
                },
                'location_map': {
                    'data_view_id': 'path',
                    'x_file_name': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/octet-stream'
                ]
            },
            api_client=api_client
        )
        self.upload_model_data_to_data_view_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/model',
                'operation_id': 'upload_model_data_to_data_view',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                    'commit_id',
                    'progress',
                    'model_jit',
                    'onnx',
                    'dynamic_onnx',
                    'config_py',
                    'best_pth',
                    'last_pth',
                    'output_template',
                    'logs',
                ],
                'required': [
                    'data_view_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                    'commit_id':
                        (str,),
                    'progress':
                        (str,),
                    'model_jit':
                        (file_type,),
                    'onnx':
                        (file_type,),
                    'dynamic_onnx':
                        (file_type,),
                    'config_py':
                        (file_type,),
                    'best_pth':
                        (file_type,),
                    'last_pth':
                        (file_type,),
                    'output_template':
                        (file_type,),
                    'logs':
                        ([file_type],),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                    'commit_id': 'commitId',
                    'progress': 'progress',
                    'model_jit': 'modelJit',
                    'onnx': 'onnx',
                    'dynamic_onnx': 'dynamicOnnx',
                    'config_py': 'configPy',
                    'best_pth': 'bestPth',
                    'last_pth': 'lastPth',
                    'output_template': 'outputTemplate',
                    'logs': 'logs',
                },
                'location_map': {
                    'data_view_id': 'path',
                    'commit_id': 'form',
                    'progress': 'form',
                    'model_jit': 'form',
                    'onnx': 'form',
                    'dynamic_onnx': 'form',
                    'config_py': 'form',
                    'best_pth': 'form',
                    'last_pth': 'form',
                    'output_template': 'form',
                    'logs': 'form',
                },
                'collection_format_map': {
                    'logs': 'csv',
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.upload_raw_data_to_data_view_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/raw-data',
                'operation_id': 'upload_raw_data_to_data_view',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                    'files',
                ],
                'required': [
                    'data_view_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                    'files':
                        ([file_type],),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                    'files': 'files',
                },
                'location_map': {
                    'data_view_id': 'path',
                    'files': 'form',
                },
                'collection_format_map': {
                    'files': 'csv',
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'multipart/form-data',
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def upload_annotation_to_data_view(
        self,
        data_view_id,
        **kwargs
    ):
        """Upload annotations to data view  # noqa: E501

        Upload annotations to data view  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_annotation_to_data_view(data_view_id, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view

        Keyword Args:
            file_meta (file_type): [optional]
            files ([file_type]): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        return self.upload_annotation_to_data_view_endpoint.call_with_http_info(**kwargs)

    def upload_dataset_zip_to_data_view(
        self,
        data_view_id,
        x_file_name,
        body,
        **kwargs
    ):
        """Upload dataset zip  # noqa: E501

        Upload dataset zip  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_dataset_zip_to_data_view(data_view_id, x_file_name, body, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view
            x_file_name (str):
            body (file_type):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        kwargs['x_file_name'] = \
            x_file_name
        kwargs['body'] = \
            body
        return self.upload_dataset_zip_to_data_view_endpoint.call_with_http_info(**kwargs)

    def upload_file_to_data_view(
        self,
        data_view_id,
        x_file_name,
        body,
        **kwargs
    ):
        """Upload file to data view  # noqa: E501

        Upload file to data view  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_file_to_data_view(data_view_id, x_file_name, body, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view
            x_file_name (str):
            body (file_type):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        kwargs['x_file_name'] = \
            x_file_name
        kwargs['body'] = \
            body
        return self.upload_file_to_data_view_endpoint.call_with_http_info(**kwargs)

    def upload_model_data_to_data_view(
        self,
        data_view_id,
        **kwargs
    ):
        """Upload model data to data view  # noqa: E501

        Upload model data to data view  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_model_data_to_data_view(data_view_id, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view

        Keyword Args:
            commit_id (str): [optional]
            progress (str): [optional]
            model_jit (file_type): [optional]
            onnx (file_type): [optional]
            dynamic_onnx (file_type): [optional]
            config_py (file_type): [optional]
            best_pth (file_type): [optional]
            last_pth (file_type): [optional]
            output_template (file_type): [optional]
            logs ([file_type]): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        return self.upload_model_data_to_data_view_endpoint.call_with_http_info(**kwargs)

    def upload_raw_data_to_data_view(
        self,
        data_view_id,
        **kwargs
    ):
        """Upload raw data to data view  # noqa: E501

        Upload raw data to data view  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_raw_data_to_data_view(data_view_id, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view

        Keyword Args:
            files ([file_type]): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        return self.upload_raw_data_to_data_view_endpoint.call_with_http_info(**kwargs)

