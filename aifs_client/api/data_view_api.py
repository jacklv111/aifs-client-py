"""
    Aifs api

    aifs api  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from aifs_client.api_client import ApiClient, Endpoint as _Endpoint
from aifs_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from aifs_client.model.annotation_view_data import AnnotationViewData
from aifs_client.model.annotation_view_locations import AnnotationViewLocations
from aifs_client.model.artifact_locations import ArtifactLocations
from aifs_client.model.create_data_view_request import CreateDataViewRequest
from aifs_client.model.create_data_view_success_resp import CreateDataViewSuccessResp
from aifs_client.model.data_view_details import DataViewDetails
from aifs_client.model.data_view_list_item import DataViewListItem
from aifs_client.model.data_view_statistics import DataViewStatistics
from aifs_client.model.dataset_zip_location import DatasetZipLocation
from aifs_client.model.divide_raw_data_data_view_request import DivideRawDataDataViewRequest
from aifs_client.model.divide_raw_data_data_view_response import DivideRawDataDataViewResponse
from aifs_client.model.filter_annotations_in_data_view_request import FilterAnnotationsInDataViewRequest
from aifs_client.model.filter_annotations_in_data_view_response import FilterAnnotationsInDataViewResponse
from aifs_client.model.get_annotations_in_data_view200_response import GetAnnotationsInDataView200Response
from aifs_client.model.get_raw_data_in_data_view200_response import GetRawDataInDataView200Response
from aifs_client.model.merge_data_views_request import MergeDataViewsRequest
from aifs_client.model.merge_data_views_success_resp import MergeDataViewsSuccessResp
from aifs_client.model.model_data_view_locations import ModelDataViewLocations
from aifs_client.model.move_data_view_items_request import MoveDataViewItemsRequest
from aifs_client.model.raw_data_hash_list import RawDataHashList
from aifs_client.model.raw_data_view_locations import RawDataViewLocations
from aifs_client.model.update_dataset_zip_request import UpdateDatasetZipRequest


class DataViewApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_data_view_endpoint = _Endpoint(
            settings={
                'response_type': (CreateDataViewSuccessResp,),
                'auth': [],
                'endpoint_path': '/data-views',
                'operation_id': 'create_data_view',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_data_view_request',
                ],
                'required': [
                    'create_data_view_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_data_view_request':
                        (CreateDataViewRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_data_view_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_data_item_in_data_view_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/data-items',
                'operation_id': 'delete_data_item_in_data_view',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                    'data_view_item_id_list',
                ],
                'required': [
                    'data_view_id',
                    'data_view_item_id_list',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                    'data_view_item_id_list':
                        ([str],),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                    'data_view_item_id_list': 'dataViewItemIdList',
                },
                'location_map': {
                    'data_view_id': 'path',
                    'data_view_item_id_list': 'query',
                },
                'collection_format_map': {
                    'data_view_item_id_list': 'csv',
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_data_view_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}',
                'operation_id': 'delete_data_view',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                ],
                'required': [
                    'data_view_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                },
                'location_map': {
                    'data_view_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.divide_data_view_endpoint = _Endpoint(
            settings={
                'response_type': (DivideRawDataDataViewResponse,),
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/raw-data-divide',
                'operation_id': 'divide_data_view',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                    'divide_raw_data_data_view_request',
                ],
                'required': [
                    'data_view_id',
                    'divide_raw_data_data_view_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                    'divide_raw_data_data_view_request':
                        (DivideRawDataDataViewRequest,),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                },
                'location_map': {
                    'data_view_id': 'path',
                    'divide_raw_data_data_view_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.filter_annotations_in_data_view_endpoint = _Endpoint(
            settings={
                'response_type': (FilterAnnotationsInDataViewResponse,),
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/annotation-filter',
                'operation_id': 'filter_annotations_in_data_view',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                    'filter_annotations_in_data_view_request',
                ],
                'required': [
                    'data_view_id',
                    'filter_annotations_in_data_view_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                    'filter_annotations_in_data_view_request':
                        (FilterAnnotationsInDataViewRequest,),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                },
                'location_map': {
                    'data_view_id': 'path',
                    'filter_annotations_in_data_view_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_all_annotation_data_in_data_view_endpoint = _Endpoint(
            settings={
                'response_type': (AnnotationViewData,),
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/annotation-data',
                'operation_id': 'get_all_annotation_data_in_data_view',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                ],
                'required': [
                    'data_view_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                },
                'location_map': {
                    'data_view_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_all_annotation_locations_in_data_view_endpoint = _Endpoint(
            settings={
                'response_type': (AnnotationViewLocations,),
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/annotation-locations',
                'operation_id': 'get_all_annotation_locations_in_data_view',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                ],
                'required': [
                    'data_view_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                },
                'location_map': {
                    'data_view_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_all_raw_data_locations_in_data_view_endpoint = _Endpoint(
            settings={
                'response_type': (RawDataViewLocations,),
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/raw-data-locations',
                'operation_id': 'get_all_raw_data_locations_in_data_view',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                ],
                'required': [
                    'data_view_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                },
                'location_map': {
                    'data_view_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_annotations_in_data_view_endpoint = _Endpoint(
            settings={
                'response_type': (GetAnnotationsInDataView200Response,),
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/annotations',
                'operation_id': 'get_annotations_in_data_view',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                    'offset',
                    'limit',
                    'raw_data_id_list',
                    'label_id',
                ],
                'required': [
                    'data_view_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 50,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                    'offset':
                        (int,),
                    'limit':
                        (int,),
                    'raw_data_id_list':
                        ([str],),
                    'label_id':
                        (str,),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                    'offset': 'offset',
                    'limit': 'limit',
                    'raw_data_id_list': 'rawDataIdList',
                    'label_id': 'labelId',
                },
                'location_map': {
                    'data_view_id': 'path',
                    'offset': 'query',
                    'limit': 'query',
                    'raw_data_id_list': 'query',
                    'label_id': 'query',
                },
                'collection_format_map': {
                    'raw_data_id_list': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_artifact_locations_in_data_view_endpoint = _Endpoint(
            settings={
                'response_type': (ArtifactLocations,),
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/artifact-locations',
                'operation_id': 'get_artifact_locations_in_data_view',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                ],
                'required': [
                    'data_view_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                },
                'location_map': {
                    'data_view_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_data_view_details_endpoint = _Endpoint(
            settings={
                'response_type': (DataViewDetails,),
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/details',
                'operation_id': 'get_data_view_details',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                ],
                'required': [
                    'data_view_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                },
                'location_map': {
                    'data_view_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_data_view_list_endpoint = _Endpoint(
            settings={
                'response_type': ([DataViewListItem],),
                'auth': [],
                'endpoint_path': '/data-views',
                'operation_id': 'get_data_view_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'offset',
                    'limit',
                    'data_view_id_list',
                    'data_view_name',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 50,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'offset':
                        (int,),
                    'limit':
                        (int,),
                    'data_view_id_list':
                        (str,),
                    'data_view_name':
                        (str,),
                },
                'attribute_map': {
                    'offset': 'offset',
                    'limit': 'limit',
                    'data_view_id_list': 'dataViewIdList',
                    'data_view_name': 'dataViewName',
                },
                'location_map': {
                    'offset': 'query',
                    'limit': 'query',
                    'data_view_id_list': 'query',
                    'data_view_name': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_data_view_statistics_endpoint = _Endpoint(
            settings={
                'response_type': (DataViewStatistics,),
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/statistics',
                'operation_id': 'get_data_view_statistics',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                ],
                'required': [
                    'data_view_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                },
                'location_map': {
                    'data_view_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_dataset_zip_location_in_data_view_endpoint = _Endpoint(
            settings={
                'response_type': (DatasetZipLocation,),
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/dataset-zip-location',
                'operation_id': 'get_dataset_zip_location_in_data_view',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                ],
                'required': [
                    'data_view_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                },
                'location_map': {
                    'data_view_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_model_data_locations_in_data_view_endpoint = _Endpoint(
            settings={
                'response_type': (ModelDataViewLocations,),
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/model-data-locations',
                'operation_id': 'get_model_data_locations_in_data_view',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                ],
                'required': [
                    'data_view_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                },
                'location_map': {
                    'data_view_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_raw_data_hash_list_in_data_view_endpoint = _Endpoint(
            settings={
                'response_type': (RawDataHashList,),
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/raw-data-hash-list',
                'operation_id': 'get_raw_data_hash_list_in_data_view',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                    'offset',
                    'limit',
                ],
                'required': [
                    'data_view_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 50,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                    'offset':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                    'offset': 'offset',
                    'limit': 'limit',
                },
                'location_map': {
                    'data_view_id': 'path',
                    'offset': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_raw_data_in_data_view_endpoint = _Endpoint(
            settings={
                'response_type': (GetRawDataInDataView200Response,),
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/raw-data',
                'operation_id': 'get_raw_data_in_data_view',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                    'offset',
                    'limit',
                    'raw_data_id_list',
                    'excluded_annotation_view_id',
                    'included_annotation_view_id',
                ],
                'required': [
                    'data_view_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 50,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                    'offset':
                        (int,),
                    'limit':
                        (int,),
                    'raw_data_id_list':
                        ([str],),
                    'excluded_annotation_view_id':
                        (str,),
                    'included_annotation_view_id':
                        (str,),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                    'offset': 'offset',
                    'limit': 'limit',
                    'raw_data_id_list': 'rawDataIdList',
                    'excluded_annotation_view_id': 'excludedAnnotationViewId',
                    'included_annotation_view_id': 'includedAnnotationViewId',
                },
                'location_map': {
                    'data_view_id': 'path',
                    'offset': 'query',
                    'limit': 'query',
                    'raw_data_id_list': 'query',
                    'excluded_annotation_view_id': 'query',
                    'included_annotation_view_id': 'query',
                },
                'collection_format_map': {
                    'raw_data_id_list': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.hard_delete_data_view_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/hard-delete',
                'operation_id': 'hard_delete_data_view',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                ],
                'required': [
                    'data_view_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                },
                'location_map': {
                    'data_view_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.merge_data_views_endpoint = _Endpoint(
            settings={
                'response_type': (MergeDataViewsSuccessResp,),
                'auth': [],
                'endpoint_path': '/data-views/merge',
                'operation_id': 'merge_data_views',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'merge_data_views_request',
                ],
                'required': [
                    'merge_data_views_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'merge_data_views_request':
                        (MergeDataViewsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'merge_data_views_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.merge_data_views_to_crurrent_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/merge',
                'operation_id': 'merge_data_views_to_crurrent',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                    'merge_data_views_request',
                ],
                'required': [
                    'data_view_id',
                    'merge_data_views_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                    'merge_data_views_request':
                        (MergeDataViewsRequest,),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                },
                'location_map': {
                    'data_view_id': 'path',
                    'merge_data_views_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.move_data_view_items_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/data-views/move',
                'operation_id': 'move_data_view_items',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'move_data_view_items_request',
                ],
                'required': [
                    'move_data_view_items_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'move_data_view_items_request':
                        (MoveDataViewItemsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'move_data_view_items_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_dataset_zip_view_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/data-views/{dataViewId}/dataset-zip',
                'operation_id': 'update_dataset_zip_view',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_view_id',
                    'update_dataset_zip_request',
                ],
                'required': [
                    'data_view_id',
                    'update_dataset_zip_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_view_id':
                        (str,),
                    'update_dataset_zip_request':
                        (UpdateDatasetZipRequest,),
                },
                'attribute_map': {
                    'data_view_id': 'dataViewId',
                },
                'location_map': {
                    'data_view_id': 'path',
                    'update_dataset_zip_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def create_data_view(
        self,
        create_data_view_request,
        **kwargs
    ):
        """Create a data view  # noqa: E501

        Create a data view  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_data_view(create_data_view_request, async_req=True)
        >>> result = thread.get()

        Args:
            create_data_view_request (CreateDataViewRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateDataViewSuccessResp
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['create_data_view_request'] = \
            create_data_view_request
        return self.create_data_view_endpoint.call_with_http_info(**kwargs)

    def delete_data_item_in_data_view(
        self,
        data_view_id,
        data_view_item_id_list,
        **kwargs
    ):
        """Delete data item in a data view  # noqa: E501

        Delete data item in a data view  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_data_item_in_data_view(data_view_id, data_view_item_id_list, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view
            data_view_item_id_list ([str]): ids of raw data which are expected to be deleted

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        kwargs['data_view_item_id_list'] = \
            data_view_item_id_list
        return self.delete_data_item_in_data_view_endpoint.call_with_http_info(**kwargs)

    def delete_data_view(
        self,
        data_view_id,
        **kwargs
    ):
        """Delete a data view  # noqa: E501

        Delete a data view  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_data_view(data_view_id, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        return self.delete_data_view_endpoint.call_with_http_info(**kwargs)

    def divide_data_view(
        self,
        data_view_id,
        divide_raw_data_data_view_request,
        **kwargs
    ):
        """Divide data view  # noqa: E501

        Divide data view  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.divide_data_view(data_view_id, divide_raw_data_data_view_request, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view
            divide_raw_data_data_view_request (DivideRawDataDataViewRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DivideRawDataDataViewResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        kwargs['divide_raw_data_data_view_request'] = \
            divide_raw_data_data_view_request
        return self.divide_data_view_endpoint.call_with_http_info(**kwargs)

    def filter_annotations_in_data_view(
        self,
        data_view_id,
        filter_annotations_in_data_view_request,
        **kwargs
    ):
        """Filter annotations in a data view  # noqa: E501

        Filter annotations in a data view  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.filter_annotations_in_data_view(data_view_id, filter_annotations_in_data_view_request, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view
            filter_annotations_in_data_view_request (FilterAnnotationsInDataViewRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            FilterAnnotationsInDataViewResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        kwargs['filter_annotations_in_data_view_request'] = \
            filter_annotations_in_data_view_request
        return self.filter_annotations_in_data_view_endpoint.call_with_http_info(**kwargs)

    def get_all_annotation_data_in_data_view(
        self,
        data_view_id,
        **kwargs
    ):
        """Get all annotation data in a data view  # noqa: E501

        Get all annotation data in a data view  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_annotation_data_in_data_view(data_view_id, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AnnotationViewData
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        return self.get_all_annotation_data_in_data_view_endpoint.call_with_http_info(**kwargs)

    def get_all_annotation_locations_in_data_view(
        self,
        data_view_id,
        **kwargs
    ):
        """Get all annotation locations in a data view  # noqa: E501

        Get all annotation locations in a data view  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_annotation_locations_in_data_view(data_view_id, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AnnotationViewLocations
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        return self.get_all_annotation_locations_in_data_view_endpoint.call_with_http_info(**kwargs)

    def get_all_raw_data_locations_in_data_view(
        self,
        data_view_id,
        **kwargs
    ):
        """Get all raw data locations in a data view  # noqa: E501

        Get all raw data locations in a data view  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_raw_data_locations_in_data_view(data_view_id, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RawDataViewLocations
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        return self.get_all_raw_data_locations_in_data_view_endpoint.call_with_http_info(**kwargs)

    def get_annotations_in_data_view(
        self,
        data_view_id,
        **kwargs
    ):
        """Get data view annotations  # noqa: E501

        Get data view annotations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_annotations_in_data_view(data_view_id, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view

        Keyword Args:
            offset (int): The number of items to skip before starting to collect the result set. [optional] if omitted the server will use the default value of 0
            limit (int): The numbers of items to return. [optional] if omitted the server will use the default value of 10
            raw_data_id_list ([str]): ids of raw data. [optional]
            label_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetAnnotationsInDataView200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        return self.get_annotations_in_data_view_endpoint.call_with_http_info(**kwargs)

    def get_artifact_locations_in_data_view(
        self,
        data_view_id,
        **kwargs
    ):
        """Get files' locations in artifact data view  # noqa: E501

        Get files' locations in artifact data view  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_artifact_locations_in_data_view(data_view_id, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ArtifactLocations
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        return self.get_artifact_locations_in_data_view_endpoint.call_with_http_info(**kwargs)

    def get_data_view_details(
        self,
        data_view_id,
        **kwargs
    ):
        """Get data view details  # noqa: E501

        Get data view details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_data_view_details(data_view_id, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DataViewDetails
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        return self.get_data_view_details_endpoint.call_with_http_info(**kwargs)

    def get_data_view_list(
        self,
        **kwargs
    ):
        """Get data view list  # noqa: E501

        Get data view list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_data_view_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            offset (int): The number of items to skip before starting to collect the result set. [optional] if omitted the server will use the default value of 0
            limit (int): The numbers of items to return. [optional] if omitted the server will use the default value of 10
            data_view_id_list (str): data view with id in data view id list will be got. [optional]
            data_view_name (str): data view name filter, support fuzzy query. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [DataViewListItem]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_data_view_list_endpoint.call_with_http_info(**kwargs)

    def get_data_view_statistics(
        self,
        data_view_id,
        **kwargs
    ):
        """Get data view statistics  # noqa: E501

        Get data view statistics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_data_view_statistics(data_view_id, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DataViewStatistics
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        return self.get_data_view_statistics_endpoint.call_with_http_info(**kwargs)

    def get_dataset_zip_location_in_data_view(
        self,
        data_view_id,
        **kwargs
    ):
        """Get dataset zip's location in a data view  # noqa: E501

        Get dataset zip's location in a data view  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_dataset_zip_location_in_data_view(data_view_id, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DatasetZipLocation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        return self.get_dataset_zip_location_in_data_view_endpoint.call_with_http_info(**kwargs)

    def get_model_data_locations_in_data_view(
        self,
        data_view_id,
        **kwargs
    ):
        """Get all model data locations in a data view  # noqa: E501

        Get all model data locations in a data view  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_data_locations_in_data_view(data_view_id, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ModelDataViewLocations
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        return self.get_model_data_locations_in_data_view_endpoint.call_with_http_info(**kwargs)

    def get_raw_data_hash_list_in_data_view(
        self,
        data_view_id,
        **kwargs
    ):
        """Get data view raw data hash list  # noqa: E501

        Get data view raw data hash list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_raw_data_hash_list_in_data_view(data_view_id, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view

        Keyword Args:
            offset (int): The number of items to skip before starting to collect the result set. [optional] if omitted the server will use the default value of 0
            limit (int): The numbers of items to return. [optional] if omitted the server will use the default value of 10
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RawDataHashList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        return self.get_raw_data_hash_list_in_data_view_endpoint.call_with_http_info(**kwargs)

    def get_raw_data_in_data_view(
        self,
        data_view_id,
        **kwargs
    ):
        """Get data view raw data  # noqa: E501

        Get data view raw data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_raw_data_in_data_view(data_view_id, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view

        Keyword Args:
            offset (int): The number of items to skip before starting to collect the result set. [optional] if omitted the server will use the default value of 0
            limit (int): The numbers of items to return. [optional] if omitted the server will use the default value of 10
            raw_data_id_list ([str]): ids of raw data. [optional]
            excluded_annotation_view_id (str): excluded annotation view with id. Return the raw data items which have no annotation in the annotation view.. [optional]
            included_annotation_view_id (str): included annotation view with id. Return the raw data items which have annotation in the annotation view.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetRawDataInDataView200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        return self.get_raw_data_in_data_view_endpoint.call_with_http_info(**kwargs)

    def hard_delete_data_view(
        self,
        data_view_id,
        **kwargs
    ):
        """Hard delete a data view  # noqa: E501

        Hard delete a data view  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.hard_delete_data_view(data_view_id, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        return self.hard_delete_data_view_endpoint.call_with_http_info(**kwargs)

    def merge_data_views(
        self,
        merge_data_views_request,
        **kwargs
    ):
        """Merge data views  # noqa: E501

        Merge data views, generate a new data view to put the result  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.merge_data_views(merge_data_views_request, async_req=True)
        >>> result = thread.get()

        Args:
            merge_data_views_request (MergeDataViewsRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MergeDataViewsSuccessResp
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['merge_data_views_request'] = \
            merge_data_views_request
        return self.merge_data_views_endpoint.call_with_http_info(**kwargs)

    def merge_data_views_to_crurrent(
        self,
        data_view_id,
        merge_data_views_request,
        **kwargs
    ):
        """Merge data views  # noqa: E501

        Merge other data views to current data view  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.merge_data_views_to_crurrent(data_view_id, merge_data_views_request, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view
            merge_data_views_request (MergeDataViewsRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        kwargs['merge_data_views_request'] = \
            merge_data_views_request
        return self.merge_data_views_to_crurrent_endpoint.call_with_http_info(**kwargs)

    def move_data_view_items(
        self,
        move_data_view_items_request,
        **kwargs
    ):
        """Move data items between data views  # noqa: E501

        Move data items from data view A to data view B  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.move_data_view_items(move_data_view_items_request, async_req=True)
        >>> result = thread.get()

        Args:
            move_data_view_items_request (MoveDataViewItemsRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['move_data_view_items_request'] = \
            move_data_view_items_request
        return self.move_data_view_items_endpoint.call_with_http_info(**kwargs)

    def update_dataset_zip_view(
        self,
        data_view_id,
        update_dataset_zip_request,
        **kwargs
    ):
        """Update a dataset-zip view meta  # noqa: E501

        Update a dataset-zip view meta  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_dataset_zip_view(data_view_id, update_dataset_zip_request, async_req=True)
        >>> result = thread.get()

        Args:
            data_view_id (str): The id of a data view
            update_dataset_zip_request (UpdateDatasetZipRequest): Update an existed dataset-zip view's meta

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_view_id'] = \
            data_view_id
        kwargs['update_dataset_zip_request'] = \
            update_dataset_zip_request
        return self.update_dataset_zip_view_endpoint.call_with_http_info(**kwargs)

