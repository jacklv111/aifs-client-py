# coding: utf-8

"""
    Aifs api

    aifs api  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aifs_client import schemas  # noqa: F401


class DataViewDetails(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.UUIDSchema
            name = schemas.StrSchema
        
            @staticmethod
            def viewType() -> typing.Type['DataViewType']:
                return DataViewType
            description = schemas.StrSchema
        
            @staticmethod
            def rawDataType() -> typing.Type['RawDataType']:
                return RawDataType
            annotationTemplateType = schemas.StrSchema
            createAt = schemas.Int64Schema
            progress = schemas.Schema
            commitId = schemas.StrSchema
            status = schemas.StrSchema
        
            @staticmethod
            def zipFormat() -> typing.Type['ZipFormat']:
                return ZipFormat
            trainRawDataViewId = schemas.UUIDSchema
            trainAnnotationViewId = schemas.UUIDSchema
            valRawDataViewId = schemas.UUIDSchema
            valAnnotationViewId = schemas.UUIDSchema
            annotationTemplateId = schemas.UUIDSchema
            rawDataViewId = schemas.UUIDSchema
            annotationViewId = schemas.UUIDSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "viewType": viewType,
                "description": description,
                "rawDataType": rawDataType,
                "annotationTemplateType": annotationTemplateType,
                "createAt": createAt,
                "progress": progress,
                "commitId": commitId,
                "status": status,
                "zipFormat": zipFormat,
                "trainRawDataViewId": trainRawDataViewId,
                "trainAnnotationViewId": trainAnnotationViewId,
                "valRawDataViewId": valRawDataViewId,
                "valAnnotationViewId": valAnnotationViewId,
                "annotationTemplateId": annotationTemplateId,
                "rawDataViewId": rawDataViewId,
                "annotationViewId": annotationViewId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["viewType"]) -> 'DataViewType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rawDataType"]) -> 'RawDataType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annotationTemplateType"]) -> MetaOapg.properties.annotationTemplateType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createAt"]) -> MetaOapg.properties.createAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["progress"]) -> MetaOapg.properties.progress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commitId"]) -> MetaOapg.properties.commitId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zipFormat"]) -> 'ZipFormat': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trainRawDataViewId"]) -> MetaOapg.properties.trainRawDataViewId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trainAnnotationViewId"]) -> MetaOapg.properties.trainAnnotationViewId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valRawDataViewId"]) -> MetaOapg.properties.valRawDataViewId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valAnnotationViewId"]) -> MetaOapg.properties.valAnnotationViewId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annotationTemplateId"]) -> MetaOapg.properties.annotationTemplateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rawDataViewId"]) -> MetaOapg.properties.rawDataViewId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annotationViewId"]) -> MetaOapg.properties.annotationViewId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "viewType", "description", "rawDataType", "annotationTemplateType", "createAt", "progress", "commitId", "status", "zipFormat", "trainRawDataViewId", "trainAnnotationViewId", "valRawDataViewId", "valAnnotationViewId", "annotationTemplateId", "rawDataViewId", "annotationViewId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["viewType"]) -> typing.Union['DataViewType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rawDataType"]) -> typing.Union['RawDataType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annotationTemplateType"]) -> typing.Union[MetaOapg.properties.annotationTemplateType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createAt"]) -> typing.Union[MetaOapg.properties.createAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["progress"]) -> typing.Union[MetaOapg.properties.progress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commitId"]) -> typing.Union[MetaOapg.properties.commitId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zipFormat"]) -> typing.Union['ZipFormat', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trainRawDataViewId"]) -> typing.Union[MetaOapg.properties.trainRawDataViewId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trainAnnotationViewId"]) -> typing.Union[MetaOapg.properties.trainAnnotationViewId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valRawDataViewId"]) -> typing.Union[MetaOapg.properties.valRawDataViewId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valAnnotationViewId"]) -> typing.Union[MetaOapg.properties.valAnnotationViewId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annotationTemplateId"]) -> typing.Union[MetaOapg.properties.annotationTemplateId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rawDataViewId"]) -> typing.Union[MetaOapg.properties.rawDataViewId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annotationViewId"]) -> typing.Union[MetaOapg.properties.annotationViewId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "viewType", "description", "rawDataType", "annotationTemplateType", "createAt", "progress", "commitId", "status", "zipFormat", "trainRawDataViewId", "trainAnnotationViewId", "valRawDataViewId", "valAnnotationViewId", "annotationTemplateId", "rawDataViewId", "annotationViewId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        viewType: typing.Union['DataViewType', schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        rawDataType: typing.Union['RawDataType', schemas.Unset] = schemas.unset,
        annotationTemplateType: typing.Union[MetaOapg.properties.annotationTemplateType, str, schemas.Unset] = schemas.unset,
        createAt: typing.Union[MetaOapg.properties.createAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        progress: typing.Union[MetaOapg.properties.progress, schemas.Unset] = schemas.unset,
        commitId: typing.Union[MetaOapg.properties.commitId, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        zipFormat: typing.Union['ZipFormat', schemas.Unset] = schemas.unset,
        trainRawDataViewId: typing.Union[MetaOapg.properties.trainRawDataViewId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        trainAnnotationViewId: typing.Union[MetaOapg.properties.trainAnnotationViewId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        valRawDataViewId: typing.Union[MetaOapg.properties.valRawDataViewId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        valAnnotationViewId: typing.Union[MetaOapg.properties.valAnnotationViewId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        annotationTemplateId: typing.Union[MetaOapg.properties.annotationTemplateId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        rawDataViewId: typing.Union[MetaOapg.properties.rawDataViewId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        annotationViewId: typing.Union[MetaOapg.properties.annotationViewId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataViewDetails':
        return super().__new__(
            cls,
            *_args,
            id=id,
            name=name,
            viewType=viewType,
            description=description,
            rawDataType=rawDataType,
            annotationTemplateType=annotationTemplateType,
            createAt=createAt,
            progress=progress,
            commitId=commitId,
            status=status,
            zipFormat=zipFormat,
            trainRawDataViewId=trainRawDataViewId,
            trainAnnotationViewId=trainAnnotationViewId,
            valRawDataViewId=valRawDataViewId,
            valAnnotationViewId=valAnnotationViewId,
            annotationTemplateId=annotationTemplateId,
            rawDataViewId=rawDataViewId,
            annotationViewId=annotationViewId,
            _configuration=_configuration,
            **kwargs,
        )

from aifs_client.model.data_view_type import DataViewType
from aifs_client.model.raw_data_type import RawDataType
from aifs_client.model.zip_format import ZipFormat
