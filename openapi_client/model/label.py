# coding: utf-8

"""
    Aifs api

    aifs api  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Label(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "color",
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            color = schemas.Int32Schema
            id = schemas.UUIDSchema
            superCategoryName = schemas.StrSchema
        
            @staticmethod
            def keyPointDef() -> typing.Type['KeyPointDef']:
                return KeyPointDef
        
            @staticmethod
            def keyPointSkeleton() -> typing.Type['KeyPointSkeleton']:
                return KeyPointSkeleton
            coverImageUrl = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "color": color,
                "id": id,
                "superCategoryName": superCategoryName,
                "keyPointDef": keyPointDef,
                "keyPointSkeleton": keyPointSkeleton,
                "coverImageUrl": coverImageUrl,
            }
    
    color: MetaOapg.properties.color
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["superCategoryName"]) -> MetaOapg.properties.superCategoryName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["keyPointDef"]) -> 'KeyPointDef': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["keyPointSkeleton"]) -> 'KeyPointSkeleton': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coverImageUrl"]) -> MetaOapg.properties.coverImageUrl: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "color", "id", "superCategoryName", "keyPointDef", "keyPointSkeleton", "coverImageUrl", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["superCategoryName"]) -> typing.Union[MetaOapg.properties.superCategoryName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["keyPointDef"]) -> typing.Union['KeyPointDef', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["keyPointSkeleton"]) -> typing.Union['KeyPointSkeleton', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coverImageUrl"]) -> typing.Union[MetaOapg.properties.coverImageUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "color", "id", "superCategoryName", "keyPointDef", "keyPointSkeleton", "coverImageUrl", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        color: typing.Union[MetaOapg.properties.color, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        superCategoryName: typing.Union[MetaOapg.properties.superCategoryName, str, schemas.Unset] = schemas.unset,
        keyPointDef: typing.Union['KeyPointDef', schemas.Unset] = schemas.unset,
        keyPointSkeleton: typing.Union['KeyPointSkeleton', schemas.Unset] = schemas.unset,
        coverImageUrl: typing.Union[MetaOapg.properties.coverImageUrl, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Label':
        return super().__new__(
            cls,
            *_args,
            color=color,
            name=name,
            id=id,
            superCategoryName=superCategoryName,
            keyPointDef=keyPointDef,
            keyPointSkeleton=keyPointSkeleton,
            coverImageUrl=coverImageUrl,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.key_point_def import KeyPointDef
from openapi_client.model.key_point_skeleton import KeyPointSkeleton
